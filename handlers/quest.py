from aiogram import F, Router, types, Bot
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from pyzbar.pyzbar import decode
from config import TOKEN
from PIL import Image
import io
import requests
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


from config import *

from FSM.allFSMs import *

from database.users import users_collection, get_user, get_user_by_id_and_point, get_point_complited_count

from database.points import get_point_by_code, get_all_points, points_collection

router = Router()
bot = Bot(token=TOKEN)

def get_cancel_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel_action")]
    ])

def get_main_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def get_next_code_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¢ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–¥", callback_data="enter_qr")],
        [InlineKeyboardButton(text="üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")]
    ])

@router.callback_query(lambda c: c.data == "enter_qr")
async def ask_for_qr(callback_query: types.CallbackQuery, state: FSMContext):
    user_col = await get_user(callback_query.message.chat.id)

    if user_col['is_completed'] == True:
        await callback_query.message.edit_text("üîç <b>–í–∏ –≤–∂–µ –ø—Ä–æ–π—à–ª–∏ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ —Ç–æ—á–∫–∏!</b>", 
                                               parse_mode="HTML",
                                               reply_markup=None)
    else:
        await state.set_state(QRCode.take_qrcode)
        await callback_query.message.edit_text(
            "üî¢ <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —ñ–∑ QR-–∫–æ–¥—É.</b>\n\n"
            "üîç <i>–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –≤—Å—ñ —Ü–∏—Ñ—Ä–∏ –∑ QR-–∫–æ–¥—É.</i>\n\n"
            "‚ú® –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É —É—á–∞—Å—Ç—å —ñ –±–∞–∂–∞—î–º–æ —É—Å–ø—ñ—Ö—É —É –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—ñ –µ–∫—Å–∫—É—Ä—Å—ñ—ó! ‚ù§Ô∏è",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()

        )
        await callback_query.answer()

@router.message(QRCode.take_qrcode, F.text)
async def receive_qr(message: types.Message, state: FSMContext):
    try:
        qr_code = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥—É.</b>\n\n"
            "üìù <i>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.</i>",
            parse_mode="HTML"
        )
        return

    user_col = await get_user_by_id_and_point(message.chat.id, qr_code)

    if user_col and "point_complited" in user_col:
        if qr_code in user_col["point_complited"]:
            await message.answer(
                "‚ùå <b>–¶–µ–π –∫–æ–¥ –≤–∂–µ –±—É–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π.</b>\n\n"
                "üìç <i>–í–∏ –≤–∂–µ –ø—Ä–æ–π—à–ª–∏ —Ü—é —Ç–æ—á–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–∞–π—Ç–∏ —ñ–Ω—à—É —Ç–æ—á–∫—É, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –µ–∫—Å–∫—É—Ä—Å—ñ—é.</i>\n\n"
                "‚ú® –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É —É—á–∞—Å—Ç—å —ñ –±–∞–∂–∞—î–º–æ —É—Å–ø—ñ—Ö—É —É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –Ω–æ–≤–∏—Ö —Ç–æ—á–æ–∫! ‚ù§Ô∏è",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard()
            )
            return

    point_passed = await get_point_by_code(qr_code)

    if point_passed is not None:
        users_collection.update_one(
            {"user_id": message.chat.id},
            {"$addToSet": {"point_complited": qr_code}}
        )
        await message.answer(
            f"üèõ <b>–í—ñ—Ç–∞—î–º–æ –∑ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è–º —Ç–æ—á–∫–∏!</b>\n\n"
            f"üìç <b>–ù–∞–∑–≤–∞ –µ–∫—Å–ø–æ–Ω–∞—Ç–∞:</b> <i>{point_passed['name']}</i>\n"
            f"üìù <b>–û–ø–∏—Å:</b> <i>{point_passed['description']}</i>\n\n"
            f"‚ú® –î—è–∫—É—î–º–æ, —â–æ –≤–∏ –±–µ—Ä–µ—Ç–µ —É—á–∞—Å—Ç—å —É –Ω–∞—à—ñ–π –µ–∫—Å–∫—É—Ä—Å—ñ—ó! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –Ω–æ–≤—ñ —Ç–æ—á–∫–∏ —Ç–∞ –¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ —Ü—ñ–∫–∞–≤–æ–≥–æ. ‚ù§Ô∏è",
            parse_mode="HTML",
            reply_markup=get_next_code_keyboard()
        )
    else:
        await message.answer("‚ùå <b>QR-–∫–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</b>\n\n"
                       "üîç <i>–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–¥.</i>",
                          parse_mode="HTML")

    completed_points = await get_point_complited_count(message.chat.id)
    all_points = await points_collection.count_documents({})

    if completed_points == all_points:
        users_collection.update_one(
            {"user_id": message.chat.id},
            {"$set": {"is_complited": True}}
        )
        await message.answer(
            "üéâ <b>–í—ñ—Ç–∞—î–º–æ!</b> üéâ\n\n"
            "‚ú® –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–ª–∏ <b>–≤—Å—ñ —Ç–æ—á–∫–∏</b>, –¥–æ–ª–∞—é—á–∏ –∫–æ–∂–µ–Ω –µ—Ç–∞–ø —ñ–∑ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—é —Ç–∞ –Ω–∞–ø–æ–ª–µ–≥–ª–∏–≤—ñ—Å—Ç—é. üèÜ\n\n"
            "üí™ –¶–µ –±—É–≤ –Ω–µ–ª–µ–≥–∫–∏–π —à–ª—è—Ö, –∞–ª–µ –≤–∏ –≤–ø–æ—Ä–∞–ª–∏—Å—è! –¢–µ–ø–µ—Ä —É –≤–∞—Å —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É <b>—Ä–æ–∑—ñ–≥—Ä–∞—à—ñ</b> —Ç–∞ –≤–∏–≥—Ä–∞—Ç–∏ —á—É–¥–æ–≤—ñ –ø—Ä–∏–∑–∏. üéÅ\n\n"
            "üì© <i>–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É!</i>\n\n"
            "‚ù§Ô∏è –î—è–∫—É—î–º–æ, —â–æ –≤–∏ –∑ –Ω–∞–º–∏!",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )

    await state.clear()