from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from config import *

from FSM.allFSMs import *

from database.users import get_user, save_user

router = Router()

@router.message(CommandStart())
async def send_welcome(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if user:
      await message.answer(
          f"üëã –í—ñ—Ç–∞—î–º–æ –Ω–∞–∑–∞–¥, {user['full_name']}! üéì\n\n"
          "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ –µ–∫—Å–∫—É—Ä—Å—ñ—é –ø–æ 3 –∫–æ—Ä–ø—É—Å—É –î–ù–£ ‚Äî "
          "–§–∞–∫—É–ª—å—Ç–µ—Ç—É –ø—Ä–∏–∫–ª–∞–¥–Ω–æ—ó –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π. üè´\n\n"
          f"üìû –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {user['phone_number']}\n"
          f"üè´ –í–∞—à –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –∑–∞–∫–ª–∞–¥: {user['previous_school']}\n\n"
          "üìç –ú–∏ –∑ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º —á–µ–∫–∞—î–º–æ –Ω–∞ –≤–∞—à—É —É—á–∞—Å—Ç—å —É –Ω–∞—à—ñ–π –µ–∫—Å–∫—É—Ä—Å—ñ—ó!"
      )
      return

    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ! –í–∏ –∑–∞–ø–∏—Å—É—î—Ç–µ—Å—å –Ω–∞ –µ–∫—Å–∫—É—Ä—Å—ñ—é –ø–æ 3 –∫–æ—Ä–ø—É—Å—É –î–ù–£ ‚Äî "
        "–§–∞–∫—É–ª—å—Ç–µ—Ç—É –ø—Ä–∏–∫–ª–∞–¥–Ω–æ—ó –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π. üéì\n\n"
        "–î–ª—è –ø–æ—á–∞—Ç–∫—É, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.\n"
        "üìã –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤–Ω–µ —ñ–º'—è (–ü–Ü–ë):"
    )
    await state.set_state(Registration.full_name)

@router.message(Registration.full_name)
async def ask_phone_number(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text) 

    contact_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
        reply_markup=contact_keyboard
    )
    await state.set_state(Registration.phone_number)


@router.message(Registration.phone_number, F.contact)
async def ask_previous_school(message: Message, state: FSMContext):
    contact = message.contact
    await state.update_data(phone_number=contact.phone_number)

    await message.answer(
        "üè´ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª–∞–¥—É:"
    )
    await state.set_state(Registration.previous_school)


@router.message(Registration.previous_school)
async def finish_registration(message: Message, state: FSMContext):
    await state.update_data(previous_school=message.text)

    user_data = await state.get_data()

    await save_user(
        user_id=message.from_user.id,
        full_name=user_data['full_name'],
        phone_number=user_data['phone_number'],
        previous_school=user_data['previous_school']
    )

    await message.answer(
        f"‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–í–∞—à—ñ –¥–∞–Ω—ñ:\n"
        f"üë§ –ü–Ü–ë: {user_data['full_name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone_number']}\n"
        f"üè´ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –∑–∞–∫–ª–∞–¥: {user_data['previous_school']}\n\n"
        "–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é! –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤—ñ—Å–æ–º."
    )

    await state.clear()