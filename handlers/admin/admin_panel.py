from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from config import *

from keyboards.admin import *

from FSM.allFSMs import *

from database.flash_admin import *
from database.users import get_user, save_user, update_user_photo, get_all_users, get_user_by_photo, delete_user
from database.points import *

from database.db import db

users_collection = db["users"]
points_collection = db["points"]

async def get_total_users():
    return await users_collection.count_documents({})

async def get_total_points():
    return await points_collection.count_documents({})

async def get_total_photos():
    return await users_collection.count_documents({"photo": {"$ne": None}})

router = Router()

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id not in MAIN_ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    await message.answer(
        "üëÆ‚Äç‚ôÇÔ∏è <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π:",
        reply_markup=get_admin_panel_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "cancel_action")
async def back_to_admin_panel(callback: CallbackQuery):
    if callback.from_user.id not in MAIN_ADMINS:
        await callback.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    await callback.message.edit_text(
        "üëÆ‚Äç‚ôÇÔ∏è <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π:",
        reply_markup=get_admin_panel_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "flash_admins")
async def flash_admins_panel(callback: CallbackQuery):
    await callback.message.edit_text(
        "üì∏ <b>–§–ª–µ—à-–∞–¥–º—ñ–Ω–∏</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π:",
        reply_markup=get_flash_admins_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "exit_admin_panel")
async def exit_admin_panel(callback: CallbackQuery):
    await callback.message.edit_text("üëã –í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")

@router.callback_query(F.data == "add_flash_admin")
async def add_flash_admin(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ñ–ª–µ—à-–∞–¥–º—ñ–Ω–æ–º:",
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_flash_admin_id)

@router.message(F.text, AdminStates.waiting_for_flash_admin_id)
async def process_flash_admin_id(message: Message, state: FSMContext):
    try:
        admin_id = int(message.text)
        await create_flash_admin(admin_id)
        await message.answer(
            f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID <b>{admin_id}</b> —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ —è–∫ —Ñ–ª–µ—à-–∞–¥–º—ñ–Ω–∞!",
            parse_mode="HTML",
            reply_markup=get_flash_admins_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π ID.")
    finally:
        await state.clear()

@router.callback_query(F.data == "shuffle_photos")
async def shuffle_photos_handler(callback: CallbackQuery):
    await callback.message.edit_text("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—ñ–≤ —Ñ–æ—Ç–æ –¥–ª—è –≤—Å—ñ—Ö —Ñ–ª–µ—à-–∞–¥–º—ñ–Ω—ñ–≤...")

    await shuffle_photos_for_all_admins()

    await callback.message.edit_text(
        "‚úÖ –°–ø–∏—Å–∫–∏ —Ñ–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–º—ñ—à–∞–Ω—ñ –¥–ª—è –≤—Å—ñ—Ö —Ñ–ª–µ—à-–∞–¥–º—ñ–Ω—ñ–≤!",
        reply_markup=get_flash_admins_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "special_functions")
async def special_functions_panel(callback: CallbackQuery):
    await callback.message.edit_text(
        "üõ† <b>–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π:",
        reply_markup=get_special_functions_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "broadcast_message")
async def broadcast_message_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üì¢ –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_broadcast_message)


@router.message(AdminStates.waiting_for_broadcast_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    broadcast_text = message.text

    users = await get_all_users()

    user_count = len(users)
    user_list_preview = "\n".join(
        [f"üë§ {user.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')} (ID: {user['user_id']})" for user in users[:10]]
    )
    if len(users) > 10:
        user_list_preview += f"\n...—Ç–∞ —â–µ {len(users) - 10} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."

    await message.answer(
        f"üì¢ <b>–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —Ä–æ–∑—Å–∏–ª–∫–∏:</b>\n\n"
        f"‚úâÔ∏è <b>–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n{broadcast_text}\n\n"
        f"üë• <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤:</b> {user_count}\n\n"
        f"üìù <b>–°–ø–∏—Å–æ–∫ –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤:</b>\n{user_list_preview}",
        parse_mode="HTML",
        reply_markup=get_confirm_broadcast_keyboard()
    )
    await state.update_data(broadcast_text=broadcast_text, users=users)
    await state.set_state(AdminStates.waiting_for_broadcast_confirmation)

@router.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    broadcast_text = data.get("broadcast_text")
    users = data.get("users")

    for user in users:
        try:
            await callback.bot.send_message(chat_id=user["user_id"], text=broadcast_text)
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}: {e}")

    await callback.message.edit_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!")
    await state.clear()

@router.callback_query(F.data == "check_creative_photo")
async def check_creative_photo(callback: CallbackQuery):
    admins = await get_all_flash_admins()

    photo_scores = {}
    for admin in admins:
        ratings = admin.get("photo_ratings", {})
        for photo_id, score in ratings.items():
            if photo_id not in photo_scores:
                photo_scores[photo_id] = 0
            photo_scores[photo_id] += score

    if not photo_scores:
        await callback.message.edit_text("‚ùå –ù–µ–º–∞—î –æ—Ü—ñ–Ω–µ–Ω–∏—Ö —Ñ–æ—Ç–æ.")
        return

    best_photo_id = max(photo_scores, key=photo_scores.get)
    best_score = photo_scores[best_photo_id]

    user = await get_user_by_photo(best_photo_id)
    if user:
        user_name = user.get("full_name", "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á")
        user_id = user.get("user_id", "–ù–µ–≤—ñ–¥–æ–º–∏–π ID")
    else:
        user_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        user_id = "–ù–µ–≤—ñ–¥–æ–º–∏–π ID"

    users = await get_all_users()
    for user in users:
        try:
            await callback.bot.send_photo(
                chat_id=user["user_id"],
                photo=best_photo_id,
                caption=(
                    f"üèÜ <b>–ù–∞–π–∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—à–µ —Ñ–æ—Ç–æ –∑ –†–∞–π–∞–Ω–æ–º –ì–æ—Å–ª—ñ–Ω–≥–æ–º!</b>\n\n"
                    f"üì∏ <b>–ê–≤—Ç–æ—Ä:</b> {user_name} (ID: {user_id})\n"
                    f"‚≠ê <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤:</b> {best_score}\n\n"
                    f"–î—è–∫—É—î–º–æ –≤—Å—ñ–º –∑–∞ —É—á–∞—Å—Ç—å! ‚ù§Ô∏è\n\n"
                    f"üì© <b>–ó –ø–µ—Ä–µ–º–æ–∂—Ü–µ–º —Å–∫–æ—Ä–æ –∑–≤'—è–∂—É—Ç—å—Å—è –¥–ª—è –≤—Ä—É—á–µ–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏!</b>"
                ),
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}: {e}")

    await callback.message.edit_text(
        f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—ñ—Å–ª–∞–Ω—ñ! –§–æ—Ç–æ-–ø–µ—Ä–µ–º–æ–∂–µ—Ü—å: {best_photo_id} –∑ {best_score} –±–∞–ª–∞–º–∏.\n"
        f"üì∏ –ê–≤—Ç–æ—Ä: {user_name} (ID: {user_id})\n\n"
        f"üì© <b>–ó –ø–µ—Ä–µ–º–æ–∂—Ü–µ–º —Å–∫–æ—Ä–æ –∑–≤'—è–∂—É—Ç—å—Å—è –¥–ª—è –≤—Ä—É—á–µ–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏!</b>",
        reply_markup=get_special_functions_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "users")
async def users_panel(callback: CallbackQuery):
    await callback.message.edit_text(
        "üë• <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π:",
        reply_markup=get_users_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "edit_user")
async def edit_user_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_user_edit_id)


@router.message(AdminStates.waiting_for_user_edit_id)
async def process_user_edit_id(message: Message, state: FSMContext):
    user_id = int(message.text)
    user = await get_user(user_id)

    if not user:
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    await state.update_data(user_id=user_id)
    await message.answer(
        f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–Ω–∞–π–¥–µ–Ω–æ: <b>{user.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "<code>–Ü–º'—è, –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –ü–æ–ø–µ—Ä–µ–¥–Ω—è —à–∫–æ–ª–∞</code>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_user_edit_data)


@router.message(AdminStates.waiting_for_user_edit_data)
async def process_user_edit_data(message: Message, state: FSMContext):
    data = message.text.split(",")
    if len(data) != 3:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n<code>–Ü–º'—è, –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –ü–æ–ø–µ—Ä–µ–¥–Ω—è —à–∫–æ–ª–∞</code>", parse_mode="HTML")
        return

    user_data = {
        "full_name": data[0].strip(),
        "phone_number": data[1].strip(),
        "previous_school": data[2].strip()
    }

    state_data = await state.get_data()
    user_id = state_data["user_id"]

    await users_collection.update_one({"user_id": user_id}, {"$set": user_data})
    await message.answer("‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()

@router.callback_query(F.data == "delete_user_photo")
async def delete_user_photo_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —É —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ç–æ:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_user_photo_delete_id)


@router.message(AdminStates.waiting_for_user_photo_delete_id)
async def process_user_photo_delete_id(message: Message, state: FSMContext):
    user_id = int(message.text)
    user = await get_user(user_id)

    if not user or not user.get("photo"):
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID –∞–±–æ —Ñ–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    await update_user_photo(user_id, None)
    await message.answer("‚úÖ –§–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
    await state.clear()

@router.callback_query(F.data == "delete_user")
async def delete_user_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_user_delete_id)


@router.message(AdminStates.waiting_for_user_delete_id)
async def process_user_delete_id(message: Message, state: FSMContext):
    user_id = int(message.text)
    user = await get_user(user_id)

    if not user:
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    await delete_user(user_id)
    await message.answer("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
    await state.clear()

@router.callback_query(F.data == "view_ratings")
async def view_ratings(callback: CallbackQuery):
    admins = await get_all_flash_admins()

    if not admins:
        await callback.message.edit_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ—Ü—ñ–Ω–æ–∫.")
        return

    ratings_summary = "üìä <b>–û—Ü—ñ–Ω–∫–∏ —Ñ–æ—Ç–æ:</b>\n\n"

    for admin in admins:
        admin_id = admin.get("admin_id", "–ù–µ–≤—ñ–¥–æ–º–∏–π ID")
        admin_user = await get_user(admin_id)
        admin_name = admin_user.get("full_name", "–ù–µ–≤—ñ–¥–æ–º–∏–π –∞–¥–º—ñ–Ω") if admin_user else f"ID: {admin_id}"

        photo_ratings = admin.get("photo_ratings", {})

        if not photo_ratings:
            ratings_summary += f"üëÆ‚Äç‚ôÇÔ∏è <b>–ê–¥–º—ñ–Ω {admin_name}:</b> –ù–µ–º–∞—î –æ—Ü—ñ–Ω–æ–∫.\n"
            continue

        ratings_summary += f"üëÆ‚Äç‚ôÇÔ∏è <b>–ê–¥–º—ñ–Ω {admin_name}:</b>\n"
        for photo_id, score in photo_ratings.items():
            user = await get_user_by_photo(photo_id)
            if user:
                user_name = user.get("full_name", "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á")
                user_id = user.get("user_id", "–ù–µ–≤—ñ–¥–æ–º–∏–π ID")
                ratings_summary += f"üì∏ <b>–ê–≤—Ç–æ—Ä:</b> {user_name} (ID: {user_id}) ‚Äî ‚≠ê {score} –±–∞–ª—ñ–≤\n"
            else:
                ratings_summary += f"üì∏ <b>–ê–≤—Ç–æ—Ä:</b> –ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî ‚≠ê {score} –±–∞–ª—ñ–≤\n"
        ratings_summary += "\n"

    await callback.message.edit_text(
        ratings_summary,
        parse_mode="HTML",
        reply_markup=get_flash_admins_keyboard()
    )

@router.callback_query(F.data == "points")
async def points_panel(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìç <b>–¢–æ—á–∫–∏</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π:",
        reply_markup=get_points_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "add_point")
async def add_point_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ—á–∫–∏:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_point_name)


@router.message(AdminStates.waiting_for_point_name)
async def process_point_name(message: Message, state: FSMContext):
    point_name = message.text.strip()
    await state.update_data(point_name=point_name)

    await message.answer(
        "‚úèÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ—á–∫–∏:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_point_description)

@router.message(AdminStates.waiting_for_point_description)
async def process_point_description(message: Message, state: FSMContext):
    point_description = message.text.strip()
    state_data = await state.get_data()
    point_name = state_data.get("point_name")

    point = await add_point(name=point_name, description=point_description)

    await message.answer(
        f"‚úÖ –¢–æ—á–∫—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ:\n\n"
        f"üìç <b>–ù–∞–∑–≤–∞:</b> {point['name']}\n"
        f"üìù <b>–û–ø–∏—Å:</b> {point['description']}\n"
        f"üîë <b>–ö–æ–¥:</b> {point['code']}",
        parse_mode="HTML"
    )
    await state.clear()

@router.callback_query(F.data == "view_points")
async def view_points(callback: CallbackQuery):
    points = await get_all_points()

    if not points:
        await callback.message.edit_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ—á–æ–∫.")
        return

    points_summary = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–æ—á–æ–∫:</b>\n\n"
    for point in points:
        points_summary += (
            f"üìç <b>–ù–∞–∑–≤–∞:</b> {point['name']}\n"
            f"üìù <b>–û–ø–∏—Å:</b> {point['description']}\n"
            f"üîë <b>–ö–æ–¥:</b> {point['code']}\n\n"
        )

    await callback.message.edit_text(
        points_summary,
        parse_mode="HTML",
        reply_markup=get_points_keyboard()
    )

@router.callback_query(F.data == "edit_point")
async def edit_point_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —Ç–æ—á–∫–∏, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_point_code)


@router.message(AdminStates.waiting_for_point_code)
async def process_edit_point_code(message: Message, state: FSMContext):
    code = int(message.text)
    point = await get_point_by_code(code)

    if not point:
        await message.answer("‚ùå –¢–æ—á–∫—É –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    await state.update_data(point_code=code)
    await message.answer(
        f"‚úÖ –¢–æ—á–∫—É –∑–Ω–∞–π–¥–µ–Ω–æ:\n\n"
        f"üìç <b>–ù–∞–∑–≤–∞:</b> {point['name']}\n"
        f"üìù <b>–û–ø–∏—Å:</b> {point['description']}\n\n"
        "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É —Ç–æ—á–∫–∏:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_point_new_name)

@router.message(AdminStates.waiting_for_point_new_name)
async def process_edit_point_name(message: Message, state: FSMContext):
    new_name = message.text.strip()
    await state.update_data(new_name=new_name)

    await message.answer(
        "‚úèÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å —Ç–æ—á–∫–∏:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_point_new_description)   

@router.message(AdminStates.waiting_for_point_new_description)
async def process_edit_point_description(message: Message, state: FSMContext):
    new_description = message.text.strip()
    state_data = await state.get_data()
    code = state_data.get("point_code")
    new_name = state_data.get("new_name")

    updated = await update_point(code=code, name=new_name, description=new_description)
    if updated:
        await message.answer("‚úÖ –¢–æ—á–∫—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ—á–∫—É.")
    await state.clear()

@router.callback_query(F.data == "delete_point")
async def delete_point_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —Ç–æ—á–∫–∏, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_for_point_delete)


@router.message(AdminStates.waiting_for_point_delete)
async def process_delete_point(message: Message, state: FSMContext):
    code = int(message.text)
    deleted = await delete_point(code)

    if deleted:
        await message.answer("‚úÖ –¢–æ—á–∫—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –¢–æ—á–∫—É –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    await state.clear()


@router.callback_query(F.data == "statistics")
async def statistics_panel(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π:",
        reply_markup=get_statistics_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "general_statistics")
async def general_statistics(callback: CallbackQuery):



    total_users = await get_total_users()
    total_points = await get_total_points()
    total_photos = await get_total_photos()

    await callback.message.edit_text(
        f"üìä <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üë• <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b> {total_users}\n"
        f"üìç <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫:</b> {total_points}\n"
        f"üì∏ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ:</b> {total_photos}\n",
        parse_mode="HTML",
        reply_markup=get_statistics_keyboard()
    )


@router.callback_query(F.data == "list_users")
async def list_users(callback: CallbackQuery):
    users = await get_all_users()

    if not users:
        await callback.message.edit_text("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        return

    users_summary = "üë• <b>–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n\n"
    for user in users[:50]:
        users_summary += f"üë§ <b>{user.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}</b> (ID: {user['user_id']})\n"

    if len(users) > 50:
        users_summary += f"\n...—Ç–∞ —â–µ {len(users) - 50} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."

    await callback.message.edit_text(
        users_summary,
        parse_mode="HTML",
        reply_markup=get_statistics_keyboard()
    )

@router.callback_query(F.data == "photo_statistics")
async def photo_statistics(callback: CallbackQuery):
    total_photos = await get_total_photos()

    await callback.message.edit_text(
        f"üì∏ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ç–æ:</b>\n\n"
        f"üì∏ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —Ñ–æ—Ç–æ:</b> {total_photos}\n",
        parse_mode="HTML",
        reply_markup=get_statistics_keyboard()
    )

@router.callback_query(F.data == "ratings_statistics")
async def ratings_statistics(callback: CallbackQuery):
    admins = await get_all_flash_admins()

    if not admins:
        await callback.message.edit_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ—Ü—ñ–Ω–æ–∫.")
        return

    ratings_summary = "‚≠ê <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ü—ñ–Ω–æ–∫:</b>\n\n"
    for admin in admins:
        admin_id = admin.get("admin_id", "–ù–µ–≤—ñ–¥–æ–º–∏–π ID")
        photo_ratings = admin.get("photo_ratings", {})

        ratings_summary += f"üëÆ‚Äç‚ôÇÔ∏è <b>–ê–¥–º—ñ–Ω {admin_id}:</b> {len(photo_ratings)} –æ—Ü—ñ–Ω–æ–∫\n"

    await callback.message.edit_text(
        ratings_summary,
        parse_mode="HTML",
        reply_markup=get_statistics_keyboard()
    )

@router.callback_query(F.data == "points_statistics")
async def points_statistics(callback: CallbackQuery):
    points = await get_all_points()

    if not points:
        await callback.message.edit_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ—á–æ–∫.")
        return

    points_summary = "üìç <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—á–æ–∫:</b>\n\n"
    points_summary += f"üìç <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫:</b> {len(points)}\n"

    await callback.message.edit_text(
        points_summary,
        parse_mode="HTML",
        reply_markup=get_statistics_keyboard()
    )

@router.callback_query(F.data == "run_raffle")
async def run_raffle(callback: CallbackQuery):
    users = await users_collection.find({"is_complited": True}).to_list(length=None)

    if not users:
        await callback.message.edit_text("‚ùå –ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É.")
        return

    winner = random.choice(users)
    winner_name = winner.get("full_name", "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á")
    winner_id = winner.get("user_id", "–ù–µ–≤—ñ–¥–æ–º–∏–π ID")

    try:
        await callback.bot.send_message(
            chat_id=winner_id,
            text=(
                f"üéâ <b>–í—ñ—Ç–∞—î–º–æ, {winner_name}!</b>\n\n"
                f"üèÜ –í–∏ —Å—Ç–∞–ª–∏ –ø–µ—Ä–µ–º–æ–∂—Ü–µ–º —Ä–æ–∑—ñ–≥—Ä–∞—à—É!\n\n"
                f"üì© –ó –≤–∞–º–∏ —Å–∫–æ—Ä–æ –∑–≤'—è–∂—É—Ç—å—Å—è –¥–ª—è –≤—Ä—É—á–µ–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏.\n\n"
                f"‚ù§Ô∏è –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!"
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é {winner_id}: {e}")

    await callback.message.edit_text(
        f"üéâ <b>–†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        f"üèÜ <b>–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å:</b> {winner_name} (ID: {winner_id})\n\n"
        f"üì© <b>–ó –ø–µ—Ä–µ–º–æ–∂—Ü–µ–º —Å–∫–æ—Ä–æ –∑–≤'—è–∂—É—Ç—å—Å—è –¥–ª—è –≤—Ä—É—á–µ–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏!</b>",
        parse_mode="HTML",
        reply_markup=get_special_functions_keyboard()
    )